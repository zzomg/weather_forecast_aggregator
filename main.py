import telebot
import telebot.types as types

from settings import BOT_TOKEN, GEOCODE_APPID
from weather_info import WeatherInfo
from weather_service import *
from weather_service import OpenWeatherMapService, YandexWeatherService, AccuWeatherService

"""
inline - —á–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ -> –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ—Å–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ -> —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
"""


ALL_SERVICES = [OpenWeatherMapService, YandexWeatherService, AccuWeatherService]
TEST_SERVICES = [OpenWeatherMapService]


class Bot:
    def __init__(self):
        self.bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)

        @self.bot.message_handler(commands=['start'])
        def _parse_start(message):
            self.parse_start(message)

        @self.bot.message_handler(commands=['menu'])
        def _menu(message):
            self.send_menu(message)

        @self.bot.message_handler(content_types=['location'])
        def _handle_location(message):
            self.handle_location(message)

        @self.bot.inline_handler(lambda query: query.query)
        def _handle_query_text(inline_query):
            self.handle_query_text(inline_query)

        @self.bot.callback_query_handler(lambda call: call.data.startswith("location"))
        def _location_callback_(call):
            self.location_callback(call)

        @self.bot.callback_query_handler(lambda call: call.data.startswith("settings"))
        def _settings_callback_(call):
            self.settings_callback(call)

    def run(self):
        self.bot.polling()

    @staticmethod
    def get_location_cityname(query):
        print(query.query)
        r = requests.get('https://api.opencagedata.com/geocode/v1/json',
                         params={'q': query.query,
                                 'key': GEOCODE_APPID,
                                 'language': 'ru'})
        return r.json()

    @staticmethod
    def get_location_coords(coords):
        print(coords)
        # TODO: f string to url + params
        r = requests.get(
            f'https://api.opencagedata.com/geocode/v1/json?q={coords[0]}%2C%20{coords[1]}&key={GEOCODE_APPID}&language=ru')
        return r.json()

    @staticmethod
    def get_formatted_weather(forecast_dict):
        pprint_rep = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {len(forecast_dict)} –¥–Ω–µ–π:\n"
        for date in forecast_dict:
            pprint_rep += f'{date}:\t{round(forecast_dict[date], 2)}¬∞C\n'

        return pprint_rep

    def send_menu(self, message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        geo_butt = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üóæ", callback_data='location set')
        settings_butt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîß", callback_data='settings')
        keyboard.add(geo_butt, settings_butt)

        self.bot.send_message(message.chat.id, "–ú–µ–Ω—é:", reply_markup=keyboard)

    def handle_query_text(self, inline_query):
        try:
            res = self.get_location_cityname(inline_query)
            # TODO: need full coordinates(int -> double) res['results'][0]['geometry']
            wi = WeatherInfo(coords=(res['results'][0]['annotations']['DMS']['lat'][:2],  # latitude
                                     res['results'][0]['annotations']['DMS']['lng'][:2]),  # longitude
                             services=TEST_SERVICES)
            forecast = wi.get_result()
            answer = types.InlineQueryResultArticle('1',
                                                    '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã ‚òÅ',
                                                    types.InputTextMessageContent(self.get_formatted_weather(forecast)))
            self.bot.answer_inline_query(inline_query.id, [answer])
        except Exception as e:
            print(e)

    def parse_start(self, message):

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        geo_butt = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üóæ", callback_data='location set')
        settings_butt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üîß", callback_data='settings')
        keyboard.add(geo_butt, settings_butt)
        self.bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç üëã.\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–∞–º—É—é —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.\n"
                                   "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n", reply_markup=keyboard)

    def handle_location(self, message):

        coords = f"{message.location.latitude} {message.location.longitude}"

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        day1_b = types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data='location today ' + coords)
        day3_b = types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data='location 3day ' + coords)
        day7_b = types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data='location week ' + coords)
        keyboard.add(day1_b, day3_b, day7_b)

        self.bot.send_message(message.chat.id,
                              "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª(–∞) –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:\n",
                              reply_markup=keyboard)

    def location_callback(self, call):
        if call.message:
            if call.data == 'location set':
                keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                geo_butt = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üóæ",
                                                request_location=True)
                keyboard.add(geo_butt)
                self.bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                                      reply_markup=keyboard)
                return

            days, lat, lng = call.data.split(" ")[1:]
            n_days = DEFAULT_N_DAYS

            if days == 'today':
                n_days = 1
            elif days == '3day':
                n_days = 3
            elif days == 'week':
                n_days = 7

            print(n_days)

            wi = WeatherInfo(coords=(lat, lng),
                             services=TEST_SERVICES,
                             n_days=n_days)
            forecast = wi.get_result()
            self.bot.send_message(call.message.chat.id, self.get_formatted_weather(forecast),
                                  reply_markup=types.ReplyKeyboardRemove())
            self.send_menu(call.message)

    def settings_callback(self, call):
        if call.message:
            data = call.data
            if data == 'settings':
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                sc = types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data='settings city')
                sd = types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", callback_data='settings days')
                ss = types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –∞–≥–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='settings sites')
                keyboard.add(sc, sd, ss)

                self.bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)


if __name__ == '__main__':
    bot = Bot()
    bot.run()
